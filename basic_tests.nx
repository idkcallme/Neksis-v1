// Basic neksis Language Tests
// Testing fundamental language features

fn test_literals() -> Int {
    let x: Int = 42;
    let y: Float = 3.14;
    let z: Bool = true;
    
    if x == 42 {
        return 1;
    }
    return 0;
}

fn test_arithmetic() -> Int {
    let a: Int = 10;
    let b: Int = 5;
    
    let sum = a + b;
    let diff = a - b;
    let product = a * b;
    
    if sum == 15 && diff == 5 && product == 50 {
        return 1;
    }
    return 0;
}

fn test_variables() -> Int {
    let mut x: Int = 10;
    x = 20;
    
    if x == 20 {
        return 1;
    }
    return 0;
}

fn test_if_statements() -> Int {
    let x: Int = 5;
    let y: Int = 10;
    
    let result: Int = if x < y {
        x + y
    } else {
        x - y
    };
    
    if result == 15 {
        return 1;
    }
    return 0;
}

fn test_while_loops() -> Int {
    let mut counter: Int = 0;
    let mut sum: Int = 0;
    
    while counter < 5 {
        sum += counter;
        counter += 1;
    }
    
    if sum == 10 {
        return 1;
    }
    return 0;
}

fn test_function_calls() -> Int {
    let result = add(5, 3);
    if result == 8 {
        return 1;
    }
    return 0;
}

fn add(a: Int, b: Int) -> Int {
    return a + b;
}

fn test_blocks() -> Int {
    let result = {
        let x: Int = 10;
        let y: Int = 20;
        x + y
    };
    
    if result == 30 {
        return 1;
    }
    return 0;
}

fn main() -> Int {
    let mut passed = 0;
    
    if test_literals() == 1 { passed += 1; }
    if test_arithmetic() == 1 { passed += 1; }
    if test_variables() == 1 { passed += 1; }
    if test_if_statements() == 1 { passed += 1; }
    if test_while_loops() == 1 { passed += 1; }
    if test_function_calls() == 1 { passed += 1; }
    if test_blocks() == 1 { passed += 1; }
    
    return passed;
} 