// Simple working test for neksis
fn test_literals() {
    let x = 42;
    let y = 3.14;
    let z = true;
    
    if x == 42 {
        return 1;
    }
    return 0;
}

fn test_arithmetic() {
    let a = 10;
    let b = 5;
    
    let sum = a + b;
    let diff = a - b;
    let product = a * b;
    
    if sum == 15 {
        if diff == 5 {
            if product == 50 {
                return 1;
            }
        }
    }
    return 0;
}

fn test_variables() {
    let mut x = 10;
    x = 20;
    
    if x == 20 {
        return 1;
    }
    return 0;
}

fn test_if_statements() {
    let x = 5;
    let y = 10;
    
    let result = if x < y {
        x + y
    } else {
        x - y
    };
    
    if result == 15 {
        return 1;
    }
    return 0;
}

fn test_while_loops() {
    let mut counter = 0;
    let mut sum = 0;
    
    while counter < 5 {
        sum = sum + counter;
        counter = counter + 1;
    }
    
    if sum == 10 {
        return 1;
    }
    return 0;
}

fn test_function_calls() {
    let result = add(5, 3);
    if result == 8 {
        return 1;
    }
    return 0;
}

fn add(a, b) {
    return a + b;
}

fn test_blocks() {
    let result = {
        let x = 10;
        let y = 20;
        x + y
    };
    
    if result == 30 {
        return 1;
    }
    return 0;
}

fn main() {
    let mut passed = 0;
    
    if test_literals() == 1 { 
        passed = passed + 1; 
    }
    if test_arithmetic() == 1 { 
        passed = passed + 1; 
    }
    if test_variables() == 1 { 
        passed = passed + 1; 
    }
    if test_if_statements() == 1 { 
        passed = passed + 1; 
    }
    if test_while_loops() == 1 { 
        passed = passed + 1; 
    }
    if test_function_calls() == 1 { 
        passed = passed + 1; 
    }
    if test_blocks() == 1 { 
        passed = passed + 1; 
    }
    
    return passed;
} 